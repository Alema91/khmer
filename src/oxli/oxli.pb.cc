// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: include/oxli/oxli.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "include/oxli/oxli.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace oxli {
class PBComponentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PBComponent> {
} _PBComponent_default_instance_;
class PBComponentMapDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PBComponentMap> {
} _PBComponentMap_default_instance_;
class PBHashtableDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PBHashtable> {
} _PBHashtable_default_instance_;
class PBPartitionerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PBPartitioner> {
} _PBPartitioner_default_instance_;

namespace protobuf_include_2foxli_2foxli_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBComponent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBComponent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBComponent, component_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBComponent, tags_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBComponentMap, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBComponentMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBComponentMap, n_components_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBComponentMap, component_counter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBComponentMap, components_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBComponentMap, k_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBComponentMap, n_tables_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBComponentMap, max_table_size_),
  0,
  1,
  ~0u,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHashtable, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHashtable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHashtable, uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHashtable, type_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPartitioner, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPartitioner, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPartitioner, tag_density_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPartitioner, n_consumed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPartitioner, map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPartitioner, graph_),
  2,
  3,
  0,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(PBComponent)},
  { 8, 18, sizeof(PBComponentMap)},
  { 24, 30, sizeof(PBHashtable)},
  { 32, 40, sizeof(PBPartitioner)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_PBComponent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PBComponentMap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PBHashtable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PBPartitioner_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "include/oxli/oxli.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _PBComponent_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _PBComponentMap_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _PBHashtable_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _PBPartitioner_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _PBComponent_default_instance_.DefaultConstruct();
  _PBComponentMap_default_instance_.DefaultConstruct();
  _PBHashtable_default_instance_.DefaultConstruct();
  _PBPartitioner_default_instance_.DefaultConstruct();
  _PBPartitioner_default_instance_.get_mutable()->map_ = const_cast< ::oxli::PBComponentMap*>(
      ::oxli::PBComponentMap::internal_default_instance());
  _PBPartitioner_default_instance_.get_mutable()->graph_ = const_cast< ::oxli::PBHashtable*>(
      ::oxli::PBHashtable::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\027include/oxli/oxli.proto\022\004oxli\"1\n\013PBCom"
      "ponent\022\024\n\014component_id\030\001 \002(\004\022\014\n\004tags\030\002 \003"
      "(\004\"\235\001\n\016PBComponentMap\022\024\n\014n_components\030\001 "
      "\002(\004\022\031\n\021component_counter\030\002 \002(\004\022%\n\ncompon"
      "ents\030\003 \003(\0132\021.oxli.PBComponent\022\t\n\001K\030\004 \001(\r"
      "\022\020\n\010n_tables\030\005 \001(\r\022\026\n\016max_table_size\030\006 \001"
      "(\004\"{\n\013PBHashtable\022\013\n\003URI\030\001 \002(\t\0224\n\004type\030\002"
      " \002(\0162\032.oxli.PBHashtable.HashType:\nCOUNTG"
      "RAPH\")\n\010HashType\022\r\n\tNODEGRAPH\020\000\022\016\n\nCOUNT"
      "GRAPH\020\001\"}\n\rPBPartitioner\022\023\n\013tag_density\030"
      "\001 \002(\r\022\022\n\nn_consumed\030\002 \001(\r\022!\n\003map\030\003 \002(\0132\024"
      ".oxli.PBComponentMap\022 \n\005graph\030\004 \002(\0132\021.ox"
      "li.PBHashtable"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 494);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "include/oxli/oxli.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_include_2foxli_2foxli_2eproto

const ::google::protobuf::EnumDescriptor* PBHashtable_HashType_descriptor() {
  protobuf_include_2foxli_2foxli_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_include_2foxli_2foxli_2eproto::file_level_enum_descriptors[0];
}
bool PBHashtable_HashType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PBHashtable_HashType PBHashtable::NODEGRAPH;
const PBHashtable_HashType PBHashtable::COUNTGRAPH;
const PBHashtable_HashType PBHashtable::HashType_MIN;
const PBHashtable_HashType PBHashtable::HashType_MAX;
const int PBHashtable::HashType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBComponent::kComponentIdFieldNumber;
const int PBComponent::kTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBComponent::PBComponent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_include_2foxli_2foxli_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:oxli.PBComponent)
}
PBComponent::PBComponent(const PBComponent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  component_id_ = from.component_id_;
  // @@protoc_insertion_point(copy_constructor:oxli.PBComponent)
}

void PBComponent::SharedCtor() {
  _cached_size_ = 0;
  component_id_ = GOOGLE_ULONGLONG(0);
}

PBComponent::~PBComponent() {
  // @@protoc_insertion_point(destructor:oxli.PBComponent)
  SharedDtor();
}

void PBComponent::SharedDtor() {
}

void PBComponent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBComponent::descriptor() {
  protobuf_include_2foxli_2foxli_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_include_2foxli_2foxli_2eproto::file_level_metadata[0].descriptor;
}

const PBComponent& PBComponent::default_instance() {
  protobuf_include_2foxli_2foxli_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBComponent* PBComponent::New(::google::protobuf::Arena* arena) const {
  PBComponent* n = new PBComponent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBComponent::Clear() {
// @@protoc_insertion_point(message_clear_start:oxli.PBComponent)
  tags_.Clear();
  component_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PBComponent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:oxli.PBComponent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 component_id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_component_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &component_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 tags = 2;
      case 2: {
        if (tag == 16u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16u, input, this->mutable_tags())));
        } else if (tag == 18u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_tags())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:oxli.PBComponent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:oxli.PBComponent)
  return false;
#undef DO_
}

void PBComponent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:oxli.PBComponent)
  // required uint64 component_id = 1;
  if (has_component_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->component_id(), output);
  }

  // repeated uint64 tags = 2;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->tags(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:oxli.PBComponent)
}

::google::protobuf::uint8* PBComponent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:oxli.PBComponent)
  // required uint64 component_id = 1;
  if (has_component_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->component_id(), target);
  }

  // repeated uint64 tags = 2;
  for (int i = 0; i < this->tags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->tags(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oxli.PBComponent)
  return target;
}

size_t PBComponent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oxli.PBComponent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint64 component_id = 1;
  if (has_component_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->component_id());
  }
  // repeated uint64 tags = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->tags_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->tags_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBComponent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:oxli.PBComponent)
  GOOGLE_DCHECK_NE(&from, this);
  const PBComponent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBComponent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:oxli.PBComponent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:oxli.PBComponent)
    MergeFrom(*source);
  }
}

void PBComponent::MergeFrom(const PBComponent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:oxli.PBComponent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tags_.MergeFrom(from.tags_);
  if (from.has_component_id()) {
    set_component_id(from.component_id());
  }
}

void PBComponent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:oxli.PBComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBComponent::CopyFrom(const PBComponent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oxli.PBComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBComponent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void PBComponent::Swap(PBComponent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBComponent::InternalSwap(PBComponent* other) {
  tags_.UnsafeArenaSwap(&other->tags_);
  std::swap(component_id_, other->component_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBComponent::GetMetadata() const {
  protobuf_include_2foxli_2foxli_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_include_2foxli_2foxli_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBComponent

// required uint64 component_id = 1;
bool PBComponent::has_component_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PBComponent::set_has_component_id() {
  _has_bits_[0] |= 0x00000001u;
}
void PBComponent::clear_has_component_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void PBComponent::clear_component_id() {
  component_id_ = GOOGLE_ULONGLONG(0);
  clear_has_component_id();
}
::google::protobuf::uint64 PBComponent::component_id() const {
  // @@protoc_insertion_point(field_get:oxli.PBComponent.component_id)
  return component_id_;
}
void PBComponent::set_component_id(::google::protobuf::uint64 value) {
  set_has_component_id();
  component_id_ = value;
  // @@protoc_insertion_point(field_set:oxli.PBComponent.component_id)
}

// repeated uint64 tags = 2;
int PBComponent::tags_size() const {
  return tags_.size();
}
void PBComponent::clear_tags() {
  tags_.Clear();
}
::google::protobuf::uint64 PBComponent::tags(int index) const {
  // @@protoc_insertion_point(field_get:oxli.PBComponent.tags)
  return tags_.Get(index);
}
void PBComponent::set_tags(int index, ::google::protobuf::uint64 value) {
  tags_.Set(index, value);
  // @@protoc_insertion_point(field_set:oxli.PBComponent.tags)
}
void PBComponent::add_tags(::google::protobuf::uint64 value) {
  tags_.Add(value);
  // @@protoc_insertion_point(field_add:oxli.PBComponent.tags)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
PBComponent::tags() const {
  // @@protoc_insertion_point(field_list:oxli.PBComponent.tags)
  return tags_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
PBComponent::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:oxli.PBComponent.tags)
  return &tags_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBComponentMap::kNComponentsFieldNumber;
const int PBComponentMap::kComponentCounterFieldNumber;
const int PBComponentMap::kComponentsFieldNumber;
const int PBComponentMap::kKFieldNumber;
const int PBComponentMap::kNTablesFieldNumber;
const int PBComponentMap::kMaxTableSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBComponentMap::PBComponentMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_include_2foxli_2foxli_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:oxli.PBComponentMap)
}
PBComponentMap::PBComponentMap(const PBComponentMap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      components_(from.components_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&n_components_, &from.n_components_,
    reinterpret_cast<char*>(&max_table_size_) -
    reinterpret_cast<char*>(&n_components_) + sizeof(max_table_size_));
  // @@protoc_insertion_point(copy_constructor:oxli.PBComponentMap)
}

void PBComponentMap::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&n_components_, 0, reinterpret_cast<char*>(&max_table_size_) -
    reinterpret_cast<char*>(&n_components_) + sizeof(max_table_size_));
}

PBComponentMap::~PBComponentMap() {
  // @@protoc_insertion_point(destructor:oxli.PBComponentMap)
  SharedDtor();
}

void PBComponentMap::SharedDtor() {
}

void PBComponentMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBComponentMap::descriptor() {
  protobuf_include_2foxli_2foxli_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_include_2foxli_2foxli_2eproto::file_level_metadata[1].descriptor;
}

const PBComponentMap& PBComponentMap::default_instance() {
  protobuf_include_2foxli_2foxli_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBComponentMap* PBComponentMap::New(::google::protobuf::Arena* arena) const {
  PBComponentMap* n = new PBComponentMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBComponentMap::Clear() {
// @@protoc_insertion_point(message_clear_start:oxli.PBComponentMap)
  components_.Clear();
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&n_components_, 0, reinterpret_cast<char*>(&max_table_size_) -
      reinterpret_cast<char*>(&n_components_) + sizeof(max_table_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PBComponentMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:oxli.PBComponentMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 n_components = 1;
      case 1: {
        if (tag == 8u) {
          set_has_n_components();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &n_components_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 component_counter = 2;
      case 2: {
        if (tag == 16u) {
          set_has_component_counter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &component_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .oxli.PBComponent components = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_components()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // optional uint32 K = 4;
      case 4: {
        if (tag == 32u) {
          set_has_k();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 n_tables = 5;
      case 5: {
        if (tag == 40u) {
          set_has_n_tables();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_tables_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 max_table_size = 6;
      case 6: {
        if (tag == 48u) {
          set_has_max_table_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_table_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:oxli.PBComponentMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:oxli.PBComponentMap)
  return false;
#undef DO_
}

void PBComponentMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:oxli.PBComponentMap)
  // required uint64 n_components = 1;
  if (has_n_components()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->n_components(), output);
  }

  // required uint64 component_counter = 2;
  if (has_component_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->component_counter(), output);
  }

  // repeated .oxli.PBComponent components = 3;
  for (unsigned int i = 0, n = this->components_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->components(i), output);
  }

  // optional uint32 K = 4;
  if (has_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->k(), output);
  }

  // optional uint32 n_tables = 5;
  if (has_n_tables()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->n_tables(), output);
  }

  // optional uint64 max_table_size = 6;
  if (has_max_table_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->max_table_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:oxli.PBComponentMap)
}

::google::protobuf::uint8* PBComponentMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:oxli.PBComponentMap)
  // required uint64 n_components = 1;
  if (has_n_components()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->n_components(), target);
  }

  // required uint64 component_counter = 2;
  if (has_component_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->component_counter(), target);
  }

  // repeated .oxli.PBComponent components = 3;
  for (unsigned int i = 0, n = this->components_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->components(i), false, target);
  }

  // optional uint32 K = 4;
  if (has_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->k(), target);
  }

  // optional uint32 n_tables = 5;
  if (has_n_tables()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->n_tables(), target);
  }

  // optional uint64 max_table_size = 6;
  if (has_max_table_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->max_table_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oxli.PBComponentMap)
  return target;
}

size_t PBComponentMap::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:oxli.PBComponentMap)
  size_t total_size = 0;

  if (has_n_components()) {
    // required uint64 n_components = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->n_components());
  }

  if (has_component_counter()) {
    // required uint64 component_counter = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->component_counter());
  }

  return total_size;
}
size_t PBComponentMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oxli.PBComponentMap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 n_components = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->n_components());

    // required uint64 component_counter = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->component_counter());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .oxli.PBComponent components = 3;
  {
    unsigned int count = this->components_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->components(i));
    }
  }

  if (_has_bits_[0 / 32] & 28u) {
    // optional uint32 K = 4;
    if (has_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->k());
    }

    // optional uint32 n_tables = 5;
    if (has_n_tables()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n_tables());
    }

    // optional uint64 max_table_size = 6;
    if (has_max_table_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_table_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBComponentMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:oxli.PBComponentMap)
  GOOGLE_DCHECK_NE(&from, this);
  const PBComponentMap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBComponentMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:oxli.PBComponentMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:oxli.PBComponentMap)
    MergeFrom(*source);
  }
}

void PBComponentMap::MergeFrom(const PBComponentMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:oxli.PBComponentMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  components_.MergeFrom(from.components_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_n_components()) {
      set_n_components(from.n_components());
    }
    if (from.has_component_counter()) {
      set_component_counter(from.component_counter());
    }
    if (from.has_k()) {
      set_k(from.k());
    }
    if (from.has_n_tables()) {
      set_n_tables(from.n_tables());
    }
    if (from.has_max_table_size()) {
      set_max_table_size(from.max_table_size());
    }
  }
}

void PBComponentMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:oxli.PBComponentMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBComponentMap::CopyFrom(const PBComponentMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oxli.PBComponentMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBComponentMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->components())) return false;
  return true;
}

void PBComponentMap::Swap(PBComponentMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBComponentMap::InternalSwap(PBComponentMap* other) {
  components_.UnsafeArenaSwap(&other->components_);
  std::swap(n_components_, other->n_components_);
  std::swap(component_counter_, other->component_counter_);
  std::swap(k_, other->k_);
  std::swap(n_tables_, other->n_tables_);
  std::swap(max_table_size_, other->max_table_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBComponentMap::GetMetadata() const {
  protobuf_include_2foxli_2foxli_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_include_2foxli_2foxli_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBComponentMap

// required uint64 n_components = 1;
bool PBComponentMap::has_n_components() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PBComponentMap::set_has_n_components() {
  _has_bits_[0] |= 0x00000001u;
}
void PBComponentMap::clear_has_n_components() {
  _has_bits_[0] &= ~0x00000001u;
}
void PBComponentMap::clear_n_components() {
  n_components_ = GOOGLE_ULONGLONG(0);
  clear_has_n_components();
}
::google::protobuf::uint64 PBComponentMap::n_components() const {
  // @@protoc_insertion_point(field_get:oxli.PBComponentMap.n_components)
  return n_components_;
}
void PBComponentMap::set_n_components(::google::protobuf::uint64 value) {
  set_has_n_components();
  n_components_ = value;
  // @@protoc_insertion_point(field_set:oxli.PBComponentMap.n_components)
}

// required uint64 component_counter = 2;
bool PBComponentMap::has_component_counter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PBComponentMap::set_has_component_counter() {
  _has_bits_[0] |= 0x00000002u;
}
void PBComponentMap::clear_has_component_counter() {
  _has_bits_[0] &= ~0x00000002u;
}
void PBComponentMap::clear_component_counter() {
  component_counter_ = GOOGLE_ULONGLONG(0);
  clear_has_component_counter();
}
::google::protobuf::uint64 PBComponentMap::component_counter() const {
  // @@protoc_insertion_point(field_get:oxli.PBComponentMap.component_counter)
  return component_counter_;
}
void PBComponentMap::set_component_counter(::google::protobuf::uint64 value) {
  set_has_component_counter();
  component_counter_ = value;
  // @@protoc_insertion_point(field_set:oxli.PBComponentMap.component_counter)
}

// repeated .oxli.PBComponent components = 3;
int PBComponentMap::components_size() const {
  return components_.size();
}
void PBComponentMap::clear_components() {
  components_.Clear();
}
const ::oxli::PBComponent& PBComponentMap::components(int index) const {
  // @@protoc_insertion_point(field_get:oxli.PBComponentMap.components)
  return components_.Get(index);
}
::oxli::PBComponent* PBComponentMap::mutable_components(int index) {
  // @@protoc_insertion_point(field_mutable:oxli.PBComponentMap.components)
  return components_.Mutable(index);
}
::oxli::PBComponent* PBComponentMap::add_components() {
  // @@protoc_insertion_point(field_add:oxli.PBComponentMap.components)
  return components_.Add();
}
::google::protobuf::RepeatedPtrField< ::oxli::PBComponent >*
PBComponentMap::mutable_components() {
  // @@protoc_insertion_point(field_mutable_list:oxli.PBComponentMap.components)
  return &components_;
}
const ::google::protobuf::RepeatedPtrField< ::oxli::PBComponent >&
PBComponentMap::components() const {
  // @@protoc_insertion_point(field_list:oxli.PBComponentMap.components)
  return components_;
}

// optional uint32 K = 4;
bool PBComponentMap::has_k() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PBComponentMap::set_has_k() {
  _has_bits_[0] |= 0x00000004u;
}
void PBComponentMap::clear_has_k() {
  _has_bits_[0] &= ~0x00000004u;
}
void PBComponentMap::clear_k() {
  k_ = 0u;
  clear_has_k();
}
::google::protobuf::uint32 PBComponentMap::k() const {
  // @@protoc_insertion_point(field_get:oxli.PBComponentMap.K)
  return k_;
}
void PBComponentMap::set_k(::google::protobuf::uint32 value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:oxli.PBComponentMap.K)
}

// optional uint32 n_tables = 5;
bool PBComponentMap::has_n_tables() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PBComponentMap::set_has_n_tables() {
  _has_bits_[0] |= 0x00000008u;
}
void PBComponentMap::clear_has_n_tables() {
  _has_bits_[0] &= ~0x00000008u;
}
void PBComponentMap::clear_n_tables() {
  n_tables_ = 0u;
  clear_has_n_tables();
}
::google::protobuf::uint32 PBComponentMap::n_tables() const {
  // @@protoc_insertion_point(field_get:oxli.PBComponentMap.n_tables)
  return n_tables_;
}
void PBComponentMap::set_n_tables(::google::protobuf::uint32 value) {
  set_has_n_tables();
  n_tables_ = value;
  // @@protoc_insertion_point(field_set:oxli.PBComponentMap.n_tables)
}

// optional uint64 max_table_size = 6;
bool PBComponentMap::has_max_table_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PBComponentMap::set_has_max_table_size() {
  _has_bits_[0] |= 0x00000010u;
}
void PBComponentMap::clear_has_max_table_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void PBComponentMap::clear_max_table_size() {
  max_table_size_ = GOOGLE_ULONGLONG(0);
  clear_has_max_table_size();
}
::google::protobuf::uint64 PBComponentMap::max_table_size() const {
  // @@protoc_insertion_point(field_get:oxli.PBComponentMap.max_table_size)
  return max_table_size_;
}
void PBComponentMap::set_max_table_size(::google::protobuf::uint64 value) {
  set_has_max_table_size();
  max_table_size_ = value;
  // @@protoc_insertion_point(field_set:oxli.PBComponentMap.max_table_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBHashtable::kURIFieldNumber;
const int PBHashtable::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBHashtable::PBHashtable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_include_2foxli_2foxli_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:oxli.PBHashtable)
}
PBHashtable::PBHashtable(const PBHashtable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uri()) {
    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:oxli.PBHashtable)
}

void PBHashtable::SharedCtor() {
  _cached_size_ = 0;
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
}

PBHashtable::~PBHashtable() {
  // @@protoc_insertion_point(destructor:oxli.PBHashtable)
  SharedDtor();
}

void PBHashtable::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PBHashtable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBHashtable::descriptor() {
  protobuf_include_2foxli_2foxli_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_include_2foxli_2foxli_2eproto::file_level_metadata[2].descriptor;
}

const PBHashtable& PBHashtable::default_instance() {
  protobuf_include_2foxli_2foxli_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBHashtable* PBHashtable::New(::google::protobuf::Arena* arena) const {
  PBHashtable* n = new PBHashtable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBHashtable::Clear() {
// @@protoc_insertion_point(message_clear_start:oxli.PBHashtable)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_uri()) {
      GOOGLE_DCHECK(!uri_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*uri_.UnsafeRawStringPointer())->clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PBHashtable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:oxli.PBHashtable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string URI = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "oxli.PBHashtable.URI");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .oxli.PBHashtable.HashType type = 2 [default = COUNTGRAPH];
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::oxli::PBHashtable_HashType_IsValid(value)) {
            set_type(static_cast< ::oxli::PBHashtable_HashType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:oxli.PBHashtable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:oxli.PBHashtable)
  return false;
#undef DO_
}

void PBHashtable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:oxli.PBHashtable)
  // required string URI = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "oxli.PBHashtable.URI");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  // required .oxli.PBHashtable.HashType type = 2 [default = COUNTGRAPH];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:oxli.PBHashtable)
}

::google::protobuf::uint8* PBHashtable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:oxli.PBHashtable)
  // required string URI = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "oxli.PBHashtable.URI");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  // required .oxli.PBHashtable.HashType type = 2 [default = COUNTGRAPH];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oxli.PBHashtable)
  return target;
}

size_t PBHashtable::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:oxli.PBHashtable)
  size_t total_size = 0;

  if (has_uri()) {
    // required string URI = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uri());
  }

  if (has_type()) {
    // required .oxli.PBHashtable.HashType type = 2 [default = COUNTGRAPH];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t PBHashtable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oxli.PBHashtable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string URI = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uri());

    // required .oxli.PBHashtable.HashType type = 2 [default = COUNTGRAPH];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBHashtable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:oxli.PBHashtable)
  GOOGLE_DCHECK_NE(&from, this);
  const PBHashtable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBHashtable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:oxli.PBHashtable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:oxli.PBHashtable)
    MergeFrom(*source);
  }
}

void PBHashtable::MergeFrom(const PBHashtable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:oxli.PBHashtable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_uri()) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void PBHashtable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:oxli.PBHashtable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBHashtable::CopyFrom(const PBHashtable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oxli.PBHashtable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBHashtable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void PBHashtable::Swap(PBHashtable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBHashtable::InternalSwap(PBHashtable* other) {
  uri_.Swap(&other->uri_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBHashtable::GetMetadata() const {
  protobuf_include_2foxli_2foxli_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_include_2foxli_2foxli_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBHashtable

// required string URI = 1;
bool PBHashtable::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PBHashtable::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
void PBHashtable::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
void PBHashtable::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
const ::std::string& PBHashtable::uri() const {
  // @@protoc_insertion_point(field_get:oxli.PBHashtable.URI)
  return uri_.GetNoArena();
}
void PBHashtable::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:oxli.PBHashtable.URI)
}
#if LANG_CXX11
void PBHashtable::set_uri(::std::string&& value) {
  set_has_uri();
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:oxli.PBHashtable.URI)
}
#endif
void PBHashtable::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:oxli.PBHashtable.URI)
}
void PBHashtable::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:oxli.PBHashtable.URI)
}
::std::string* PBHashtable::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:oxli.PBHashtable.URI)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PBHashtable::release_uri() {
  // @@protoc_insertion_point(field_release:oxli.PBHashtable.URI)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PBHashtable::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:oxli.PBHashtable.URI)
}

// required .oxli.PBHashtable.HashType type = 2 [default = COUNTGRAPH];
bool PBHashtable::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PBHashtable::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void PBHashtable::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void PBHashtable::clear_type() {
  type_ = 1;
  clear_has_type();
}
::oxli::PBHashtable_HashType PBHashtable::type() const {
  // @@protoc_insertion_point(field_get:oxli.PBHashtable.type)
  return static_cast< ::oxli::PBHashtable_HashType >(type_);
}
void PBHashtable::set_type(::oxli::PBHashtable_HashType value) {
  assert(::oxli::PBHashtable_HashType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:oxli.PBHashtable.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBPartitioner::kTagDensityFieldNumber;
const int PBPartitioner::kNConsumedFieldNumber;
const int PBPartitioner::kMapFieldNumber;
const int PBPartitioner::kGraphFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBPartitioner::PBPartitioner()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_include_2foxli_2foxli_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:oxli.PBPartitioner)
}
PBPartitioner::PBPartitioner(const PBPartitioner& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_map()) {
    map_ = new ::oxli::PBComponentMap(*from.map_);
  } else {
    map_ = NULL;
  }
  if (from.has_graph()) {
    graph_ = new ::oxli::PBHashtable(*from.graph_);
  } else {
    graph_ = NULL;
  }
  ::memcpy(&tag_density_, &from.tag_density_,
    reinterpret_cast<char*>(&n_consumed_) -
    reinterpret_cast<char*>(&tag_density_) + sizeof(n_consumed_));
  // @@protoc_insertion_point(copy_constructor:oxli.PBPartitioner)
}

void PBPartitioner::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&map_, 0, reinterpret_cast<char*>(&n_consumed_) -
    reinterpret_cast<char*>(&map_) + sizeof(n_consumed_));
}

PBPartitioner::~PBPartitioner() {
  // @@protoc_insertion_point(destructor:oxli.PBPartitioner)
  SharedDtor();
}

void PBPartitioner::SharedDtor() {
  if (this != internal_default_instance()) {
    delete map_;
  }
  if (this != internal_default_instance()) {
    delete graph_;
  }
}

void PBPartitioner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPartitioner::descriptor() {
  protobuf_include_2foxli_2foxli_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_include_2foxli_2foxli_2eproto::file_level_metadata[3].descriptor;
}

const PBPartitioner& PBPartitioner::default_instance() {
  protobuf_include_2foxli_2foxli_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBPartitioner* PBPartitioner::New(::google::protobuf::Arena* arena) const {
  PBPartitioner* n = new PBPartitioner;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBPartitioner::Clear() {
// @@protoc_insertion_point(message_clear_start:oxli.PBPartitioner)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_map()) {
      GOOGLE_DCHECK(map_ != NULL);
      map_->::oxli::PBComponentMap::Clear();
    }
    if (has_graph()) {
      GOOGLE_DCHECK(graph_ != NULL);
      graph_->::oxli::PBHashtable::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&tag_density_, 0, reinterpret_cast<char*>(&n_consumed_) -
      reinterpret_cast<char*>(&tag_density_) + sizeof(n_consumed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PBPartitioner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:oxli.PBPartitioner)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 tag_density = 1;
      case 1: {
        if (tag == 8u) {
          set_has_tag_density();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tag_density_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 n_consumed = 2;
      case 2: {
        if (tag == 16u) {
          set_has_n_consumed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_consumed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .oxli.PBComponentMap map = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .oxli.PBHashtable graph = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_graph()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:oxli.PBPartitioner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:oxli.PBPartitioner)
  return false;
#undef DO_
}

void PBPartitioner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:oxli.PBPartitioner)
  // required uint32 tag_density = 1;
  if (has_tag_density()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tag_density(), output);
  }

  // optional uint32 n_consumed = 2;
  if (has_n_consumed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->n_consumed(), output);
  }

  // required .oxli.PBComponentMap map = 3;
  if (has_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->map_, output);
  }

  // required .oxli.PBHashtable graph = 4;
  if (has_graph()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->graph_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:oxli.PBPartitioner)
}

::google::protobuf::uint8* PBPartitioner::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:oxli.PBPartitioner)
  // required uint32 tag_density = 1;
  if (has_tag_density()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tag_density(), target);
  }

  // optional uint32 n_consumed = 2;
  if (has_n_consumed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->n_consumed(), target);
  }

  // required .oxli.PBComponentMap map = 3;
  if (has_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->map_, false, target);
  }

  // required .oxli.PBHashtable graph = 4;
  if (has_graph()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->graph_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oxli.PBPartitioner)
  return target;
}

size_t PBPartitioner::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:oxli.PBPartitioner)
  size_t total_size = 0;

  if (has_map()) {
    // required .oxli.PBComponentMap map = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->map_);
  }

  if (has_graph()) {
    // required .oxli.PBHashtable graph = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->graph_);
  }

  if (has_tag_density()) {
    // required uint32 tag_density = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tag_density());
  }

  return total_size;
}
size_t PBPartitioner::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oxli.PBPartitioner)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .oxli.PBComponentMap map = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->map_);

    // required .oxli.PBHashtable graph = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->graph_);

    // required uint32 tag_density = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tag_density());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 n_consumed = 2;
  if (has_n_consumed()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->n_consumed());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPartitioner::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:oxli.PBPartitioner)
  GOOGLE_DCHECK_NE(&from, this);
  const PBPartitioner* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBPartitioner>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:oxli.PBPartitioner)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:oxli.PBPartitioner)
    MergeFrom(*source);
  }
}

void PBPartitioner::MergeFrom(const PBPartitioner& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:oxli.PBPartitioner)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_map()) {
      mutable_map()->::oxli::PBComponentMap::MergeFrom(from.map());
    }
    if (from.has_graph()) {
      mutable_graph()->::oxli::PBHashtable::MergeFrom(from.graph());
    }
    if (from.has_tag_density()) {
      set_tag_density(from.tag_density());
    }
    if (from.has_n_consumed()) {
      set_n_consumed(from.n_consumed());
    }
  }
}

void PBPartitioner::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:oxli.PBPartitioner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPartitioner::CopyFrom(const PBPartitioner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oxli.PBPartitioner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPartitioner::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_map()) {
    if (!this->map_->IsInitialized()) return false;
  }
  if (has_graph()) {
    if (!this->graph_->IsInitialized()) return false;
  }
  return true;
}

void PBPartitioner::Swap(PBPartitioner* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBPartitioner::InternalSwap(PBPartitioner* other) {
  std::swap(map_, other->map_);
  std::swap(graph_, other->graph_);
  std::swap(tag_density_, other->tag_density_);
  std::swap(n_consumed_, other->n_consumed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBPartitioner::GetMetadata() const {
  protobuf_include_2foxli_2foxli_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_include_2foxli_2foxli_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBPartitioner

// required uint32 tag_density = 1;
bool PBPartitioner::has_tag_density() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PBPartitioner::set_has_tag_density() {
  _has_bits_[0] |= 0x00000004u;
}
void PBPartitioner::clear_has_tag_density() {
  _has_bits_[0] &= ~0x00000004u;
}
void PBPartitioner::clear_tag_density() {
  tag_density_ = 0u;
  clear_has_tag_density();
}
::google::protobuf::uint32 PBPartitioner::tag_density() const {
  // @@protoc_insertion_point(field_get:oxli.PBPartitioner.tag_density)
  return tag_density_;
}
void PBPartitioner::set_tag_density(::google::protobuf::uint32 value) {
  set_has_tag_density();
  tag_density_ = value;
  // @@protoc_insertion_point(field_set:oxli.PBPartitioner.tag_density)
}

// optional uint32 n_consumed = 2;
bool PBPartitioner::has_n_consumed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PBPartitioner::set_has_n_consumed() {
  _has_bits_[0] |= 0x00000008u;
}
void PBPartitioner::clear_has_n_consumed() {
  _has_bits_[0] &= ~0x00000008u;
}
void PBPartitioner::clear_n_consumed() {
  n_consumed_ = 0u;
  clear_has_n_consumed();
}
::google::protobuf::uint32 PBPartitioner::n_consumed() const {
  // @@protoc_insertion_point(field_get:oxli.PBPartitioner.n_consumed)
  return n_consumed_;
}
void PBPartitioner::set_n_consumed(::google::protobuf::uint32 value) {
  set_has_n_consumed();
  n_consumed_ = value;
  // @@protoc_insertion_point(field_set:oxli.PBPartitioner.n_consumed)
}

// required .oxli.PBComponentMap map = 3;
bool PBPartitioner::has_map() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PBPartitioner::set_has_map() {
  _has_bits_[0] |= 0x00000001u;
}
void PBPartitioner::clear_has_map() {
  _has_bits_[0] &= ~0x00000001u;
}
void PBPartitioner::clear_map() {
  if (map_ != NULL) map_->::oxli::PBComponentMap::Clear();
  clear_has_map();
}
const ::oxli::PBComponentMap& PBPartitioner::map() const {
  // @@protoc_insertion_point(field_get:oxli.PBPartitioner.map)
  return map_ != NULL ? *map_
                         : *::oxli::PBComponentMap::internal_default_instance();
}
::oxli::PBComponentMap* PBPartitioner::mutable_map() {
  set_has_map();
  if (map_ == NULL) {
    map_ = new ::oxli::PBComponentMap;
  }
  // @@protoc_insertion_point(field_mutable:oxli.PBPartitioner.map)
  return map_;
}
::oxli::PBComponentMap* PBPartitioner::release_map() {
  // @@protoc_insertion_point(field_release:oxli.PBPartitioner.map)
  clear_has_map();
  ::oxli::PBComponentMap* temp = map_;
  map_ = NULL;
  return temp;
}
void PBPartitioner::set_allocated_map(::oxli::PBComponentMap* map) {
  delete map_;
  map_ = map;
  if (map) {
    set_has_map();
  } else {
    clear_has_map();
  }
  // @@protoc_insertion_point(field_set_allocated:oxli.PBPartitioner.map)
}

// required .oxli.PBHashtable graph = 4;
bool PBPartitioner::has_graph() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PBPartitioner::set_has_graph() {
  _has_bits_[0] |= 0x00000002u;
}
void PBPartitioner::clear_has_graph() {
  _has_bits_[0] &= ~0x00000002u;
}
void PBPartitioner::clear_graph() {
  if (graph_ != NULL) graph_->::oxli::PBHashtable::Clear();
  clear_has_graph();
}
const ::oxli::PBHashtable& PBPartitioner::graph() const {
  // @@protoc_insertion_point(field_get:oxli.PBPartitioner.graph)
  return graph_ != NULL ? *graph_
                         : *::oxli::PBHashtable::internal_default_instance();
}
::oxli::PBHashtable* PBPartitioner::mutable_graph() {
  set_has_graph();
  if (graph_ == NULL) {
    graph_ = new ::oxli::PBHashtable;
  }
  // @@protoc_insertion_point(field_mutable:oxli.PBPartitioner.graph)
  return graph_;
}
::oxli::PBHashtable* PBPartitioner::release_graph() {
  // @@protoc_insertion_point(field_release:oxli.PBPartitioner.graph)
  clear_has_graph();
  ::oxli::PBHashtable* temp = graph_;
  graph_ = NULL;
  return temp;
}
void PBPartitioner::set_allocated_graph(::oxli::PBHashtable* graph) {
  delete graph_;
  graph_ = graph;
  if (graph) {
    set_has_graph();
  } else {
    clear_has_graph();
  }
  // @@protoc_insertion_point(field_set_allocated:oxli.PBPartitioner.graph)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace oxli

// @@protoc_insertion_point(global_scope)
